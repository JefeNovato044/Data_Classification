{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.cluster import KMeans\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "import seaborn as sea"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Reporte de clasificacion de datos de INEGI sobre Turismo\n",
    "- En este reporte se explica el uso de Kmeans para la clasificación de datos de turismo\n",
    "- Pretendemos clasificar los comportamientos de los meses dependiendo de las variables como son el gasto de cada mes, el metodo que mas se usa para viajar en cada mes, etc.\n",
    "- Para lograr el objetivo se tuvo que limpiar y transformar los datos antes de aplicarlos en el algortimo de K-Means\n",
    "\n",
    "\n",
    "- Jack Robles y Jorge Erosa"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Importar Datos Inegi en formato CSV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = pd.read_csv(\"tr_eti_18_20.csv\")\n",
    "df2 = pd.read_csv(\"tr_evf_18_20.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Inspección de los contenidos de ambos datos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PROD_EST</th>\n",
       "      <th>ANIO</th>\n",
       "      <th>MES</th>\n",
       "      <th>TIPO</th>\n",
       "      <th>TIPO_DE_TRANSPORTE</th>\n",
       "      <th>CATEGORIA</th>\n",
       "      <th>VARIABLE</th>\n",
       "      <th>VALOR</th>\n",
       "      <th>UNIDAD_DE_MEDIDA</th>\n",
       "      <th>ESTATUS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Encuesta de Turismo de Internación (ETI)</td>\n",
       "      <td>2018</td>\n",
       "      <td>Agosto</td>\n",
       "      <td>Ingresos</td>\n",
       "      <td>Aéreo</td>\n",
       "      <td>Turistas de internación</td>\n",
       "      <td>Gasto total</td>\n",
       "      <td>1358750907</td>\n",
       "      <td>Dólares</td>\n",
       "      <td>Cifras revisadas</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Encuesta de Turismo de Internación (ETI)</td>\n",
       "      <td>2018</td>\n",
       "      <td>Agosto</td>\n",
       "      <td>Ingresos</td>\n",
       "      <td>Terrestre</td>\n",
       "      <td>Turistas de internación</td>\n",
       "      <td>Gasto total</td>\n",
       "      <td>105686094</td>\n",
       "      <td>Dólares</td>\n",
       "      <td>Cifras revisadas</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                   PROD_EST  ANIO     MES      TIPO  \\\n",
       "0  Encuesta de Turismo de Internación (ETI)  2018  Agosto  Ingresos   \n",
       "1  Encuesta de Turismo de Internación (ETI)  2018  Agosto  Ingresos   \n",
       "\n",
       "  TIPO_DE_TRANSPORTE                CATEGORIA     VARIABLE       VALOR  \\\n",
       "0              Aéreo  Turistas de internación  Gasto total  1358750907   \n",
       "1          Terrestre  Turistas de internación  Gasto total   105686094   \n",
       "\n",
       "  UNIDAD_DE_MEDIDA           ESTATUS  \n",
       "0          Dólares  Cifras revisadas  \n",
       "1          Dólares  Cifras revisadas  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PROD_EST</th>\n",
       "      <th>ANIO</th>\n",
       "      <th>MES</th>\n",
       "      <th>TIPO</th>\n",
       "      <th>TIPO_DE_TRANSPORTE</th>\n",
       "      <th>CATEGORIA</th>\n",
       "      <th>VARIABLE</th>\n",
       "      <th>VALOR</th>\n",
       "      <th>UNIDAD_DE_MEDIDA</th>\n",
       "      <th>ESTATUS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Encuesta de Viajeros Fronterizos (EVF)</td>\n",
       "      <td>2018</td>\n",
       "      <td>Agosto</td>\n",
       "      <td>Ingresos</td>\n",
       "      <td>Peatones</td>\n",
       "      <td>Turistas fronterizos</td>\n",
       "      <td>Gasto total</td>\n",
       "      <td>14093185</td>\n",
       "      <td>Dólares</td>\n",
       "      <td>Cifras revisadas</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Encuesta de Viajeros Fronterizos (EVF)</td>\n",
       "      <td>2018</td>\n",
       "      <td>Agosto</td>\n",
       "      <td>Ingresos</td>\n",
       "      <td>En automóviles</td>\n",
       "      <td>Turistas fronterizos</td>\n",
       "      <td>Gasto total</td>\n",
       "      <td>90268996</td>\n",
       "      <td>Dólares</td>\n",
       "      <td>Cifras revisadas</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                 PROD_EST  ANIO     MES      TIPO  \\\n",
       "0  Encuesta de Viajeros Fronterizos (EVF)  2018  Agosto  Ingresos   \n",
       "1  Encuesta de Viajeros Fronterizos (EVF)  2018  Agosto  Ingresos   \n",
       "\n",
       "  TIPO_DE_TRANSPORTE             CATEGORIA     VARIABLE     VALOR  \\\n",
       "0           Peatones  Turistas fronterizos  Gasto total  14093185   \n",
       "1     En automóviles  Turistas fronterizos  Gasto total  90268996   \n",
       "\n",
       "  UNIDAD_DE_MEDIDA           ESTATUS  \n",
       "0          Dólares  Cifras revisadas  \n",
       "1          Dólares  Cifras revisadas  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.head(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Limpieza de Datos"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Eliminando datos que no son de interés para el análisis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = df1.drop(columns = [\"ESTATUS\",\"PROD_EST\"])\n",
    "df2 = df2.drop(columns = [\"ESTATUS\",\"PROD_EST\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ANIO</th>\n",
       "      <th>MES</th>\n",
       "      <th>TIPO</th>\n",
       "      <th>TIPO_DE_TRANSPORTE</th>\n",
       "      <th>CATEGORIA</th>\n",
       "      <th>VARIABLE</th>\n",
       "      <th>VALOR</th>\n",
       "      <th>UNIDAD_DE_MEDIDA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018</td>\n",
       "      <td>Agosto</td>\n",
       "      <td>Ingresos</td>\n",
       "      <td>Aéreo</td>\n",
       "      <td>Turistas de internación</td>\n",
       "      <td>Gasto total</td>\n",
       "      <td>1358750907</td>\n",
       "      <td>Dólares</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018</td>\n",
       "      <td>Agosto</td>\n",
       "      <td>Ingresos</td>\n",
       "      <td>Terrestre</td>\n",
       "      <td>Turistas de internación</td>\n",
       "      <td>Gasto total</td>\n",
       "      <td>105686094</td>\n",
       "      <td>Dólares</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ANIO     MES      TIPO TIPO_DE_TRANSPORTE                CATEGORIA  \\\n",
       "0  2018  Agosto  Ingresos              Aéreo  Turistas de internación   \n",
       "1  2018  Agosto  Ingresos          Terrestre  Turistas de internación   \n",
       "\n",
       "      VARIABLE       VALOR UNIDAD_DE_MEDIDA  \n",
       "0  Gasto total  1358750907          Dólares  \n",
       "1  Gasto total   105686094          Dólares  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.head(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Separando datos de ingresos y egresos\n",
    "- Esto sirve para poder tener un mayor control en nuestro analisis y clasicicación de los datos obtenidos\n",
    "- Se separó los datos en Ingreso y egresos, Gasto monetario y numero de visitantes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1In = df1.loc[df1.TIPO == \"Ingresos\"]\n",
    "df1In = df1In.loc[df1In.VARIABLE == \"Gasto total\"]\n",
    "df1En = df1.loc[df1.TIPO == \"Egresos\"]\n",
    "df1En = df1En.loc[df1En.VARIABLE == \"Gasto total\"]\n",
    "\n",
    "\n",
    "df2In = df2.loc[df2.TIPO == \"Egresos\"]\n",
    "df2In = df2In.loc[df2In.VARIABLE == \"Gasto total\"]\n",
    "df2En = df2.loc[df2.TIPO == \"Egresos\"]\n",
    "df2En = df2En.loc[df2En.VARIABLE == \"Gasto total\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Eliminando variables \n",
    "- Como nuestro objectivo es clasificar los meses en bases a las tendendencias de otras variables, el año no es de interés para el análisis.\n",
    "\n",
    "- La unidad de medida solo es útil para dar contexto a los humanos, sin emabrgo para la clasificacion en base a clusters usando el algoritmo de K-Means, el tipo de unidad no es de utilidad.\n",
    "\n",
    "- Ya se sabe que todos los valores de \"VALOR\" son de gasto total, por lo que la columna \"VARIABLE\" queda sin utilidad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1In=df1In.drop(columns = [\"ANIO\",\"TIPO\",\"UNIDAD_DE_MEDIDA\",\"VARIABLE\"])\n",
    "df1En=df1En.drop(columns = [\"ANIO\",\"TIPO\",\"UNIDAD_DE_MEDIDA\",\"VARIABLE\"])\n",
    "    \n",
    "df2In=df2In.drop(columns = [\"ANIO\",\"TIPO\",\"UNIDAD_DE_MEDIDA\",\"VARIABLE\"])\n",
    "df2En=df2En.drop(columns = [\"ANIO\",\"TIPO\",\"UNIDAD_DE_MEDIDA\",\"VARIABLE\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Uniendo DataSets\n",
    "- Se crearon 2 datasets \n",
    "- Uno conteninedo ingresos totales de los turistas\n",
    "- El segundo conteniendo ingresos totales de Turistas por mes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "dfIn = pd.concat([df1In, df2In],ignore_index=True,sort=False)\n",
    "dfEn = pd.concat([df1En, df2En],ignore_index=True,sort=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Previsualizar DataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MES</th>\n",
       "      <th>TIPO_DE_TRANSPORTE</th>\n",
       "      <th>CATEGORIA</th>\n",
       "      <th>VALOR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Agosto</td>\n",
       "      <td>Aéreo</td>\n",
       "      <td>Turistas de internación</td>\n",
       "      <td>1358750907</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Agosto</td>\n",
       "      <td>Terrestre</td>\n",
       "      <td>Turistas de internación</td>\n",
       "      <td>105686094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Agosto</td>\n",
       "      <td>Cruceros</td>\n",
       "      <td>Excursionistas en cruceros</td>\n",
       "      <td>35649178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Septiembre</td>\n",
       "      <td>Aéreo</td>\n",
       "      <td>Turistas de internación</td>\n",
       "      <td>1080454557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Septiembre</td>\n",
       "      <td>Terrestre</td>\n",
       "      <td>Turistas de internación</td>\n",
       "      <td>80236790</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>177</th>\n",
       "      <td>Agosto</td>\n",
       "      <td>En automóviles</td>\n",
       "      <td>Excursionistas fronterizos</td>\n",
       "      <td>59650176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>178</th>\n",
       "      <td>Septiembre</td>\n",
       "      <td>Peatones</td>\n",
       "      <td>Turistas fronterizos</td>\n",
       "      <td>3023018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>179</th>\n",
       "      <td>Septiembre</td>\n",
       "      <td>En automóviles</td>\n",
       "      <td>Turistas fronterizos</td>\n",
       "      <td>9436896</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>180</th>\n",
       "      <td>Septiembre</td>\n",
       "      <td>Peatones</td>\n",
       "      <td>Excursionistas fronterizos</td>\n",
       "      <td>16049420</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>181</th>\n",
       "      <td>Septiembre</td>\n",
       "      <td>En automóviles</td>\n",
       "      <td>Excursionistas fronterizos</td>\n",
       "      <td>60123988</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>182 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            MES TIPO_DE_TRANSPORTE                   CATEGORIA       VALOR\n",
       "0        Agosto              Aéreo     Turistas de internación  1358750907\n",
       "1        Agosto          Terrestre     Turistas de internación   105686094\n",
       "2        Agosto           Cruceros  Excursionistas en cruceros    35649178\n",
       "3    Septiembre              Aéreo     Turistas de internación  1080454557\n",
       "4    Septiembre          Terrestre     Turistas de internación    80236790\n",
       "..          ...                ...                         ...         ...\n",
       "177      Agosto     En automóviles  Excursionistas fronterizos    59650176\n",
       "178  Septiembre           Peatones        Turistas fronterizos     3023018\n",
       "179  Septiembre     En automóviles        Turistas fronterizos     9436896\n",
       "180  Septiembre           Peatones  Excursionistas fronterizos    16049420\n",
       "181  Septiembre     En automóviles  Excursionistas fronterizos    60123988\n",
       "\n",
       "[182 rows x 4 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfIn"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Obtener valores únicos de los valores de las columnas no númericas\n",
    "\n",
    "- La razón de esta acción, es que para usar K-Means, los valores de las columnas deben ser numericas\n",
    "- Por lo que se crea una ID única a cada valor único de esas columnas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre', 'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio']\n",
      "['Aéreo', 'Terrestre', 'Cruceros', 'Peatones', 'En automóviles']\n",
      "['Turistas de internación', 'Excursionistas en cruceros', 'Turistas fronterizos', 'Excursionistas fronterizos']\n"
     ]
    }
   ],
   "source": [
    "mesesI = list(dfIn.MES.unique())\n",
    "transporteI = list(dfIn.TIPO_DE_TRANSPORTE.unique())\n",
    "catI = list(dfIn.CATEGORIA.unique())\n",
    "\n",
    "print(mesesI)\n",
    "print(transporteI)\n",
    "print(catI)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "dfIn.MES = dfIn.MES.apply(lambda x: mesesI.index(x)+1)\n",
    "dfIn.TIPO_DE_TRANSPORTE = dfIn.TIPO_DE_TRANSPORTE.apply(lambda x: transporteI.index(x)+1)\n",
    "dfIn.CATEGORIA = dfIn.CATEGORIA.apply(lambda x: catI.index(x)+1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### DataFrame transformado"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MES</th>\n",
       "      <th>TIPO_DE_TRANSPORTE</th>\n",
       "      <th>CATEGORIA</th>\n",
       "      <th>VALOR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1358750907</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>105686094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>35649178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1080454557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>80236790</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>177</th>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>59650176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>178</th>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3023018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>179</th>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>9436896</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>180</th>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>16049420</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>181</th>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>60123988</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>182 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     MES  TIPO_DE_TRANSPORTE  CATEGORIA       VALOR\n",
       "0      1                   1          1  1358750907\n",
       "1      1                   2          1   105686094\n",
       "2      1                   3          2    35649178\n",
       "3      2                   1          1  1080454557\n",
       "4      2                   2          1    80236790\n",
       "..   ...                 ...        ...         ...\n",
       "177    1                   5          4    59650176\n",
       "178    2                   4          3     3023018\n",
       "179    2                   5          3     9436896\n",
       "180    2                   4          4    16049420\n",
       "181    2                   5          4    60123988\n",
       "\n",
       "[182 rows x 4 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfIn"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Calculado los centroides usando una función de scikit learn de kmeans"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "182\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2,\n",
       "       1, 1, 2, 1, 1, 0, 1, 1, 0, 1, 1, 2, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1,\n",
       "       1, 0, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1], dtype=int32)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Kmeans\n",
    "features = list(dfIn.columns)\n",
    "data = dfIn[features]\n",
    "\n",
    "\n",
    "KM = KMeans(n_clusters = 3,precompute_distances=\"auto\")\n",
    "\n",
    "y = KM.fit_predict(dfIn)\n",
    "print(len(y)) #NUMERO DE OBSERVACIONES\n",
    "y#Clusters "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "dfIn[\"Cluster\"] = y"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# El DataSet Transformado\n",
    "- La variable cluster indica a que cluster esa observación pertenece.\n",
    "- En total se formaron 3 centroides y por lo tanto 3 clusters diferents de observaciones"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MES</th>\n",
       "      <th>TIPO_DE_TRANSPORTE</th>\n",
       "      <th>CATEGORIA</th>\n",
       "      <th>VALOR</th>\n",
       "      <th>Cluster</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1358750907</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>105686094</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>35649178</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1080454557</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>80236790</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>31082664</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1261147916</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>74118437</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>43106028</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1434120416</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>97836133</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>49440171</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1984542826</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>164989092</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>61182292</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1878990371</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>111552434</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>66481257</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1871198780</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>92968310</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>55192804</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2087694630</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>125301210</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>65847690</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1675775486</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>114170583</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>63372322</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1549815108</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>107092786</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>10</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>37269644</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1558326203</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>11</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>140449813</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>11</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>35927176</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1733021816</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>12</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>136557978</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>12</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>41146567</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1524954202</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>115364020</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>41066095</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1073536095</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>70290256</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>36284509</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1246760206</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>87992561</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>49773610</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1488746812</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>104913032</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>58914536</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1973341591</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>176705270</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    MES  TIPO_DE_TRANSPORTE  CATEGORIA       VALOR  Cluster\n",
       "0     1                   1          1  1358750907        0\n",
       "1     1                   2          1   105686094        1\n",
       "2     1                   3          2    35649178        1\n",
       "3     2                   1          1  1080454557        0\n",
       "4     2                   2          1    80236790        1\n",
       "5     2                   3          2    31082664        1\n",
       "6     3                   1          1  1261147916        0\n",
       "7     3                   2          1    74118437        1\n",
       "8     3                   3          2    43106028        1\n",
       "9     4                   1          1  1434120416        0\n",
       "10    4                   2          1    97836133        1\n",
       "11    4                   3          2    49440171        1\n",
       "12    5                   1          1  1984542826        2\n",
       "13    5                   2          1   164989092        1\n",
       "14    5                   3          2    61182292        1\n",
       "15    6                   1          1  1878990371        2\n",
       "16    6                   2          1   111552434        1\n",
       "17    6                   3          2    66481257        1\n",
       "18    7                   1          1  1871198780        2\n",
       "19    7                   2          1    92968310        1\n",
       "20    7                   3          2    55192804        1\n",
       "21    8                   1          1  2087694630        2\n",
       "22    8                   2          1   125301210        1\n",
       "23    8                   3          2    65847690        1\n",
       "24    9                   1          1  1675775486        2\n",
       "25    9                   2          1   114170583        1\n",
       "26    9                   3          2    63372322        1\n",
       "27   10                   1          1  1549815108        0\n",
       "28   10                   2          1   107092786        1\n",
       "29   10                   3          2    37269644        1\n",
       "30   11                   1          1  1558326203        0\n",
       "31   11                   2          1   140449813        1\n",
       "32   11                   3          2    35927176        1\n",
       "33   12                   1          1  1733021816        2\n",
       "34   12                   2          1   136557978        1\n",
       "35   12                   3          2    41146567        1\n",
       "36    1                   1          1  1524954202        0\n",
       "37    1                   2          1   115364020        1\n",
       "38    1                   3          2    41066095        1\n",
       "39    2                   1          1  1073536095        0\n",
       "40    2                   2          1    70290256        1\n",
       "41    2                   3          2    36284509        1\n",
       "42    3                   1          1  1246760206        0\n",
       "43    3                   2          1    87992561        1\n",
       "44    3                   3          2    49773610        1\n",
       "45    4                   1          1  1488746812        0\n",
       "46    4                   2          1   104913032        1\n",
       "47    4                   3          2    58914536        1\n",
       "48    5                   1          1  1973341591        2\n",
       "49    5                   2          1   176705270        1"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfIn.head(50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 259.5x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Grafica de los valores por MES, respecto al gasto monetario\n",
    "a = sea.FacetGrid(dfIn, hue = 'Cluster')\n",
    "a = a.map(plt.scatter, 'MES', \"VALOR\")\n",
    "a = a.add_legend()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
